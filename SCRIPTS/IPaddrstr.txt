octetToB[o_String] := Module[{digit, len, plen},
  digit = IntegerDigits[ToExpression[o], 2];
  len = Length[digit];
  plen = 8 - len;
  ArrayPad[digit, {plen, 0}]
  ];

iprangeToB[i_String] := Module[{seed, len, plen},
  seed = Table[1, {ToExpression[i]}];
  len = Length[seed];
  plen = 32 - len;
  Partition[ArrayPad[seed, {0, plen}], 8]
  ];

ipaddrToB[a_String] := Module[{q},
  q = StringSplit[a, "."];
  Map[octetToB, q]
  ];

BToO[b_List] := Module[{},
  FromDigits[b, 2]
  ];

invertB[b_List]:=Module[{},
  b/.{1->0,0->1}
  ];

ip[ip_String] := 
  Module[{addr, subn, bba}, {addr, subn} = StringSplit[ip, "/"];
   {"InputAddr" -> ipaddrToB[addr] -> Map[BToI, ipaddrToB[addr]], 
    "Mask" -> iprangeToB[subn] -> Map[BToI, iprangeToB[subn]], 
    "NetAddr" -> ipaddrToB[addr]*iprangeToB[subn] -> Map[BToI, ipaddrToB[addr]*iprangeToB[subn]],
    "BroadAddr" -> (bba=Partition[Inner[BitOr,Flatten[Map[invertB,iprangeToB[subn]]],Flatten[ipaddrToB[addr]],List],8]) -> Map[BToI,bba]
}
  ];
