directedConnectedComponents[g_, v_] := 
 Module[{vAll, vOther, addEdge},
  vAll = VertexList[g];
  vOther = Complement[vAll, {v}];
  addEdge = Map[# -> v &, vOther];
  ConnectedComponents[Flatten[{EdgeList[g], addEdge}, 1], v]
  ];
directedConnectedGraphComponents[g_, v_] := 
 Module[{vAll, vOther, addEdge},
  vAll = VertexList[g];
  vOther = Complement[vAll, {v}];
  addEdge = Map[# -> v &, vOther];
  Map[Subgraph[g, #] &, 
   ConnectedComponents[Flatten[{EdgeList[g], addEdge}, 1], v]]
  ];
directedConnectedComponent[g_, v_] := Module[{vAll, vOther, addEdge},
  vAll = VertexList[g];
  vOther = Complement[vAll, {v}];
  addEdge = Map[# -> v &, vOther];
  ConnectedComponents[Flatten[{EdgeList[g], addEdge}, 1], v][[1]]
  ];
directedConnectedGraphComponent[g_, v_] := 
 Module[{vAll, vOther, addEdge},
  vAll = VertexList[g];
  vOther = Complement[vAll, {v}];
  addEdge = Map[# -> v &, vOther];
  Subgraph[g, 
   ConnectedComponents[Flatten[{EdgeList[g], addEdge}, 1], v][[1]]]
  ];

vertexInGraph[g_] := Module[{deg, pos, vname},
  deg = VertexInDegree[g];
  pos = Position[deg, 0] // Flatten // Union;
  vname = VertexList[g][[pos]];
  Map[directedConnectedGraphComponent[g, #] &, vname]
  ];

vertexLabelList[g_] := Module[{gs, defg},
  gs = ToString[InputForm[g]];
  defg = ToExpression[StringReplace[gs, "Graph" -> "defGraph"]];
  Cases[defg, _voc, Infinity]
  ];

graphFederartion[g_, op___] := Module[{v, e},
  v = Union[Flatten[Map[VertexList, g]]];
  e = Flatten[Map[EdgeList, g]];
  Graph[v, e, op]
  ];

graphRedundancyComplexityElement[g_Graph] := 
 Module[{vc, ec, ecmean, etp},
  vc = VertexCount[g] // N;
  ec = EdgeCount[g] // N;
  ecmean = ec/(vc^2);
  etp = Entropy[AdjacencyMatrix[g] // Flatten] // N;
  {(vc), (E^ecmean), (E^etp), (vc) (E^ecmean) (E^etp)}
  ];

graphRedundancyComplexity[g_Graph] := Module[{vc, ec, ecmean, etp},
  vc = VertexCount[g] // N;
  ec = EdgeCount[g] // N;
  ecmean = ec/(vc^2);
  etp = Entropy[AdjacencyMatrix[g] // Flatten] // N;
  (vc) (E^ecmean) (E^etp)
  ];
